#################################################################################
#										#
# Author: Stefan Berger, stefanb@us.ibm.com					#
# $Id: test_ownership 4729 2014-09-08 20:16:34Z kgoldman $			#
# (c) Copyright IBM Corporation 2006, 2010.					#
# 										#
# All rights reserved.								#
# 										#
# Redistribution and use in source and binary forms, with or without		#
# modification, are permitted provided that the following conditions are	#
# met:										#
# 										#
# Redistributions of source code must retain the above copyright notice,	#
# this list of conditions and the following disclaimer.				#
# 										#
# Redistributions in binary form must reproduce the above copyright		#
# notice, this list of conditions and the following disclaimer in the		#
# documentation and/or other materials provided with the distribution.		#
# 										#
# Neither the names of the IBM Corporation nor the names of its			#
# contributors may be used to endorse or promote products derived from		#
# this software without specific prior written permission.			#
# 										#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS		#
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT		#
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR		#
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT		#
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,	#
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT		#
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,		#
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY		#
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT		#
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE		#
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.		#
#										#
#################################################################################


doTestOwnership ()
{
	echo "Performing clear operation under physical access using forceclear."
	forceclear > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not properly run forceclear."
		dumpOutput
		echo "   **** You will have to re-cycle the TPM ****"
	else
		echo " INFO: Successfully ran forceclear."
		tpmbios -n > run.out
		ERR=$?
		if [ $ERR -ne 0 ]; then
			echo " ERROR: Could not set presence."
			dumpOutput
		else
			echo " INFO: Successfully set presence."
			takeTPM $OWNER_PASSWORD $SRK_PASSWORD $KEYSIZE_ST
			ERR=$?
			if [ $ERR -ne 0 ]; then
				echo " ERROR: Could not take ownership of TPM."
				dumpOutput
				echo "   **** You will have to re-cycle the TPM ****"
			fi
		fi
	fi


	echo "Disabling the owner clear command."
	disableownerclear -pwdo $OWNER_PASSWORD > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not properly run this command."
		dumpOutput
	else
		echo " INFO: Successfully disabled the owner clear command."
		echo "Trying to run owner clear"
		clearown -pwdo $OWNER_PASSWORD > run.out
		ERR=$?
		if [ $ERR -ne 0 ]; then
			echo " INFO: Successfully completed command."
		else
			echo " ERROR: Unexpected error code ($ERR)."
			dumpOutput
		fi
		
		if [ "$USE_TPMINIT" == "0" ]; then
			echo ""
			echo "Please stop the TPM and restart it. Press enter to continue."
			read enter
			echo ""
		else
			tpminit > run.out
		fi
		TPM_TRANSPORT_EK=
		TPM_TRANSPORT_SK=
		tpmbios > run.out
		ERR=$?
		if [ $ERR -ne 0 ]; then
			echo " ERROR: Could not initialize communication with the TPM."
			echo "    *** Please re-cycle the TPM!! ***"
			dumpOutput
		fi

		echo "Trying to clear ownership."
		clearown -pwdo $OWNER_PASSWORD > run.out
		ERR=$?
		if [ $ERR -ne 0 ]; then
			echo " INFO: Successfully completed command."
		else
			echo " ERROR: Unexpected error code ($ERR)."
			dumpOutput
		fi

		echo "Running 'force clear' under physical access."
		forceclear > run.out
		ERR=$?
		if [ $ERR -ne 0 ]; then
			echo " ERROR: Could not properly run 'force clear'."
			dumpOutput
		else
			echo " INFO: Successfully ran 'force clear'."
		fi

#		echo "Trying to clear ownership."
#		clearown -pwdo $OWNER_PASSWORD > run.out
#		ERR=$?
#		if [ $ERR -ne 0 ]; then
#			echo " ERROR: Could not clear ownership."
#			dumpOutput
#		else
#			echo " INFO: Successfully cleared ownership."
#		fi

		if [ "$USE_TPMINIT" == "0" ]; then
			echo ""
			echo "Please stop the TPM and restart it. Press enter to continue."
			read enter
			echo ""
		else
			./tpminit > run.out
		fi
		TPM_TRANSPORT_EK=
		TPM_TRANSPORT_SK=
		tpmbios > run.out
		ERR=$?
		if [ $ERR -ne 0 ]; then
			echo " ERROR: Could not initialize communication with the TPM."
			dumpOutput
			echo "    *** Please re-cycle the TPM!! ***"
			return 1
		fi

		if [ "$USE_TPMINIT" == "0" ]; then
			echo ""
			echo "Please stop the TPM and restart it. Press enter to continue."
			read enter
			echo ""
		else
			./tpminit > run.out
		fi
		TPM_TRANSPORT_EK=
		TPM_TRANSPORT_SK=
		tpmbios > run.out
		ERR=$?
		if [ $ERR -ne 0 ]; then
			echo " ERROR: Could not initialize communication with the TPM."
			dumpOutput
			echo "    *** Please re-cycle the TPM!! ***"
			return 1
		else
			echo "Preparing TPM for owner installation"
			setownerinstall > run.out
			ERR=$?
			if [ $ERR -ne 0 ]; then
				echo " ERROR: Could not prepare the TPM for owner installation"
				dumpOutput
				echo "    *** Please re-cycle the TPM!! ***"
				return 1
			else
				echo " INFO: Prepared TPM for owner installation."
				echo "Taking ownership of TPM."
				takeown -pwdo $OWNER_PASSWORD -pwds $SRK_PASSWORD > run.out
				ERR=$?
				if [ $ERR -ne 0 ]; then
					echo " ERROR: Could not take ownership!"
					dumpOutput
					echo "    *** Please re-cycle the TPM!! ***"
					return 1
				else
					echo " INFO: Successfully took ownership."
				fi
			fi
		fi

		echo "Deactivating the TPM."
		settempdeactivated > run.out
		ERR=$?
		if [ $ERR -ne 0 ]; then
			echo " ERROR: Could not deactivate the TPM."
			dumpOutput
		else
			echo " INFO: Successfully deactivated the TPM."
			echo "Trying to hash file '$0'"
			sha -if $0 > run.out
			ERR=$?
			if [ $ERR -eq 0 ]; then
				echo " INFO: Could hash file"
			else
				echo " ERROR: Could not hash file"
			fi

			echo "Trying to get random numbers"
			random > run.out
			ERR=$?
			if [ $ERR -ne 0 ]; then
				echo " INFO: Command completed successfully."
			else
				echo " ERROR: Could get random numbers from deactivated TPM."
			fi

			if [ "$USE_TPMINIT" == "0" ]; then
				echo ""
				echo "Please stop the TPM and restart it. Press enter to continue."
				read enter
				echo ""
			else
				./tpminit > run.out
			fi
			TPM_TRANSPORT_EK=
			TPM_TRANSPORT_SK=
			tpmbios > run.out
			ERR=$?
			if [ $ERR -ne 0 ]; then
				echo " ERROR: Could not initialize communication with the TPM."
				dumpOutput
				echo "    *** Please re-cycle the TPM!! ***"
				return 1
			fi
		fi
	fi

	echo ""
	echo "Trying to set the operator password under physical presence"
	setoperatorauth -pwdo $TPM_OPERATOR_AUTH > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not set the operator password."
		dumpOutput
	else
		echo " INFO: Successfully changed operator password."
		echo "Changing operator password back to old password."
		setoperatorauth -pwdo $TPM_OPERATOR_AUTH > run.out
		ERR=$?
		if [ $ERR -ne 0 ]; then
			echo " ERROR: Could not change the operator password"
			dumpOutput
		else
			echo " INFO: Successfully change operator password"
		fi

		echo "Setting physical presence of the device to 'no presence' (0x10)."
		physicalpresence -x 0010 > run.out
		ERR=$?
		if [ $ERR -ne 0 ]; then
			echo " ERROR: Could not change physical presence property."
			dumpOutput
			echo "        Leaving this test."
			return 1
		else
			echo " INFO: Successfully changed physical presence property."
			echo "Trying to set the operator password under no physical presence"
			setoperatorauth -pwdo $TPM_OPERATOR_AUTH > run.out
			ERR=$?
			if [ $ERR -ne 0 ]; then
				echo " INFO: Command completed successfully."
			else
				echo " ERROR: Could change the password."
				dumpOutput

	
				if [ "$USE_TPMINIT" == "0" ]; then
					echo ""
					echo "Please stop the TPM and restart it. Press enter to continue."
					read enter
					echo ""
				else
					./tpminit > run.out
				fi
				TPM_TRANSPORT_EK=
				TPM_TRANSPORT_SK=

				tpmbios > run.out
				ERR=$?
				if [ $ERR -ne 0 ]; then
					echo " ERROR: Could not initialize communication with the TPM."
					dumpOutput
					echo "    *** Please re-cycle the TPM!! ***"
					return 1
				fi
			fi
		fi
	fi

	echo "Checking capabilities whether TPM is disabled."
	checkTPMDisabled
	RES=$?
	if [ $RES -eq 0 ]; then
		echo " INFO: TPM is enabled."
	else
		echo " WARN: TPM is already disabled."
	fi

	echo "Setting the state of permanent flags to 'TPM disabled'"
	ownersetdisable -pwdo $OWNER_PASSWORD > run.out
	ERR=$?
	if [ $ERR -eq 0 ]; then
		echo " INFO: Successfully disabled TPM."
	else
		echo " ERROR: Could not disable TPM."
		dumpOutput
	fi


	echo "Checking capabilities whether TPM is disabled now."
	checkTPMDisabled
	RES=$?
	if [ $RES -eq 0 ]; then
		echo " ERROR: TPM is still enabled."
		dumpOutput
	else
		echo " INFO: TPM is disabled."
	fi

	echo "Setting the state of permanent flags to 'TPM enabled'"
	ownersetdisable -pwdo $OWNER_PASSWORD -en > run.out
	ERR=$?
	if [ $ERR -eq 0 ]; then
		echo " INFO: Successfully enabled TPM."
	else
		echo " ERROR: Could not enable TPM."
		dumpOutput
	fi


	echo "Checking capabilities whether TPM is enabled now."
	checkTPMDisabled
	RES=$?
	if [ $RES -eq 0 ]; then
		echo " INFO: TPM is enabled."
	else
		echo " ERROR: TPM is still disabled."
		dumpOutput
	fi

	
}

### Test for a revocable endorsement key
doTestRevEK() 
{
	REVEKPWD=revekpwd
	echo ""
	echo ""
	echo "Please stop the TPM and remove all its state files (00.perm*)."
	echo "Press enter to continue"
	read enter
	tpmbios > run.out
	if [ "$USE_TPMINIT" == "0" ]; then
		echo ""
		echo "Please stop the TPM and restart it. Press enter to continue."
		read enter
		echo ""
	else
		tpminit > run.out
	fi
	TPM_TRANSPORT_EK=
	TPM_TRANSPORT_SK=
	tpmbios > run.out

	echo "Creating revocable EK."
	createrevek -pwdk $REVEKPWD > run.out
	ERR=$?
	if [ $ERR -eq 0 ]; then
		echo " INFO: Successfully created a revocable EK."
	else
		echo " ERROR: Could not create revocable EK."
		return 1
	fi

	echo "Revoking trust"
	revtrust -pwdk $REVEKPWD > run.out
	ERR=$?
	if [ $ERR -eq 0 ]; then
		echo " INFO: Successfully cleared revocable EK."
	else
		echo " ERROR: Could not revoke EK."
		return 1
	fi

	echo "Creating a non-revocable EK without resetting the TPM."
	createek > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " INFO: Command completed successfully."
	else
		echo " ERROR: Could create EK."
	fi

	recycleTPM 

	echo "Creating a non-revocable EK after resetting the TPM."
	createek > run.out
	ERR=$?
	if [ $ERR -eq 0 ]; then
		echo " INFO: Successfully created EK."
	else
		echo " ERROR: Could not create EK."
	fi
}

# owner authorized ordinals with ownerAuth from file

doTestOwnershipFile()
{
	echo ""
	echo "Performing ownership ordinals with ownerAuth from file."
	echo ""

	echo -n "12345678901234567890" > ownerauthfile

	echo "Setting physical presence of the device."
	physicalpresence -s > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not change physical presence property."
		dumpOutput
		echo "        Leaving this test."
		return 1
	else
		echo " INFO: Successfully changed physical presence property."
	fi

	echo "Running 'force clear' under physical access."
	forceclear > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not properly run 'force clear'."
		dumpOutput
	else
		echo " INFO: Successfully ran 'force clear'."
	fi
	
	echo "TPM_PhysicalEnable should succeed with Physical Presence"
	physicalenable > run.out
	RES=$?
	if [ $RES -ne 0 ]; then
	    echo " ERROR: Cannot set Physical Enable with Physical Presence"
	else
	    echo " INFO: Can set Physical Enable with Physical Presence"
	fi

	echo "TPM_PhysicalSetDeactivated should succeed with Physical Presence"
	physicalsetdeactivated -c > run.out
	RES=$?
	if [ $RES -ne 0 ]; then
	    echo " ERROR: Cannot clear Physical Deactivated with Physical Presence"
	else
	    echo " INFO: Can clear Physical Deactivated with Physical Presence"
	fi

	echo "Taking ownership of TPM using ownerAuth file."
	takeown -pwdof ownerauthfile -pwds $SRK_PASSWORD > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not take ownership!"
		dumpOutput
		echo "        Leaving this test."
		return 1
	else
		echo " INFO: Successfully took ownership."
	fi

	echo "Creating and activating an identity using ownerAuth file."
	makeidentity -pwdof ownerauthfile  \
	           -la $IDENTITY_LABEL \
	           -pwdk $IDENTITY_PASSWORD \
	           -pwds $SRK_PASSWORD \
	           -ac > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not create and/or activate identity."
		dumpOutput
	else
		echo " INFO: Successfully created and activated identity."
		IDKEY_HANDLE=0x`cat run.out | grep "Identity key handle" | gawk '{print $4}'`
	fi

	echo "Setting Changing SRK password."
	chgtpmauth -pwdof ownerauthfile -pwdn $SRK_PASSWORD > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not change the SRK password."
		dumpOutput
	else
		echo " INFO: Changed the SRK password."
	fi

	echo "Changing owner authorization from file."
	chgtpmauth -own -pwdof ownerauthfile -pwdnf ownerauthfile > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not change the owner authorization."
		dumpOutput
	else
		echo " INFO: Changed the owner authorization."
	fi

	echo "Reading public part of SRK."
	ownerreadinternalpub \
		-hk $SRK_HANDLE -of srk.pub -pwdof ownerauthfile > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not read public part of SRK."
		dumpOutput
	else
		echo " INFO: Successfully read public part of SRK."
	fi

	echo "Resetlockvalue with owner authorization from file."
	resetlockvalue -pwdof ownerauthfile > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not resetlockvalue with owner authorization from file."
		dumpOutput
	else
		echo " INFO: Successful resetlockvalue with owner authorization from file."
	fi

	echo "ownersetdisable with owner authorization from file."
	ownersetdisable -pwdof ownerauthfile > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not ownersetdisable with owner authorization from file."
		dumpOutput
	else
		echo " INFO: Successful ownersetdisable with owner authorization from file."
	fi

	echo "ownersetdisable (enable) with owner authorization from file."
	ownersetdisable -pwdof ownerauthfile -en > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not ownersetdisable with owner authorization from file."
		dumpOutput
	else
		echo " INFO: Successful ownersetdisable with owner authorization from file."
	fi

	echo "getpubek with owner authorization from file."
	getpubek -pwdof ownerauthfile > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not getpubek with owner authorization from file."
		dumpOutput
	else
		echo " INFO: Successful getpubek with owner authorization from file."
	fi

	echo "setcapability with owner authorization from file."
	setcapability -pwdof ownerauthfile \
		              -cap $TPM_SET_PERM_FLAGS \
		              -scap $TPM_PF_READSRKPUB -val 1 > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Call to setcapability failed."
		dumpOutput
	else
		echo " INFO: Successful setcapability."
	fi

	echo "Disabling auditing."
	enableaudit -ord 10 -pwdof ownerauthfile -d > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not disable auditing."
		dumpOutput
	else
		echo " INFO: Successfully disabled auditing."
	fi

	echo "Set owner evict flag on identity key with owner authorization from file."
	keycontrol -pwdk $IDENTITY_PASSWORD \
	        -hk $IDKEY_HANDLE \
	        -bn 1 \
		-bv 1 \
		-pwdof ownerauthfile > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not set owner evict flag on identity key"
		dumpOutput
	else
		echo " INFO: Successfully set owner evict flag on identity key"
	fi

	echo "Clear owner evict flag on identity key with owner authorization from file."
	keycontrol -pwdk $IDENTITY_PASSWORD \
	        -hk $IDKEY_HANDLE \
	        -bn 1 \
		-bv 0 \
		-pwdof ownerauthfile > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not clear owner evict flag on identity key"
		dumpOutput
	else
		echo " INFO: Successfully clear owner evict flag on identity key"
	fi
	
	echo "Disable EK public key read with owner authorization from file."
	disablepubek -pwdof ownerauthfile > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not disable EK public key read"
		dumpOutput
	else
		echo " INFO: Successfully disabled EK public key read"
	fi
	
	MESSAGE="Test"
	INDEX=0x00000000
	echo "Writing to DIR index $INDEX with owner authorization from file."
	dirwrite -pwdof ownerauthfile -in $INDEX -ic $MESSAGE > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not write to DIR index $INDEX."
		dumpOutput
	else
		echo " INFO: Successfully wrote to DIR index $INDEX."
	fi

	NV_INDEX=00000010

	echo "NV define space with owner authorization from file." 
	nv_definespace -pwdof ownerauthfile  \
	            -in $NV_INDEX \
		    -sz 1 \
	            -per 20002 \
		    > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not NV define space."
		dumpOutput
	else
		echo " INFO: Could NV define space."
	fi

	echo "Writing Test test into memory area with owner authorization from file"
	nv_writevalue -pwdof ownerauthfile \
	                -in $INDEX_GOOD \
	                -ic $TEXT > run.out
	if [ $? -eq 0 ]; then
		echo " ERROR: Could write into memory area."
		dumpOutput
	else
		echo " INFO: Successfully completed command."
	fi

	echo "Reading complete text from area with owner authorization from file."
	./nv_readvalue -pwdof ownerauthfile \
	               -in $NV_INDEX \
	               -sz 1 \
	               -off 0 \
	               > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not read from memory area."
		dumpOutput
	else
		echo " INFO: Could read from memory area."
	fi

	echo "Delete NV space with owner authorization from file." 
	nv_definespace -pwdof ownerauthfile \
	            -in $NV_INDEX \
		    -sz 0 \
	            -per 20002 \
		    > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not delete NV space."
		dumpOutput
	else
		echo " INFO: Could delete NV space."
	fi

	echo "Creating counter with owner authorization from file"
	./counter_create -pwdof ownerauthfile \
	                 -la $COUNTER1_LABEL \
	                 -pwdc $COUNTER1_PASSWORD > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then 
		echo " ERROR: Could not create the counter."
		dumpOutput
	else
		COUNTER1_ID=`grep -E "New counter" run.out | gawk '{print $4}'`
		echo " INFO: Successfully created counter with id $COUNTER1_ID."
	fi

	echo "Releasing the 1st counter with owner authorization from file"
	ERR=$?
	./counter_release -pwdof ownerauthfile  \
	                  -ix $COUNTER1_ID > run.out
	if [ $ERR -ne 0 ]; then 
		echo " ERROR: Could not release the counter."
		dumpOutput
	else
		echo " INFO: Successfully released the counter."
	fi

	LABEL=1
	OWNERDELFILE=ownerdel.bin
	OWNERDELFILE_NEW=del_new.bin
	OWNER_DELEGATION_PASSWORD=ownerdelgpassword

	echo "Creating a family ID (A) with owner authorization from file"
	delegatemanage \
		-create $LABEL \
		-pwdof ownerauthfile  > run.out

	ERR=$?
	if [ $ERR -eq 0 ]; then
		FAMILYID=`cat run.out | grep "Family ID" | gawk '{ print $6 } '`
		echo " INFO: Successfully created family ID $FAMILYID"
	else
		echo " ERROR: Could not create the family. Aborting this test"
		dumpOutput
	fi

	echo "Activating family with ID $FAMILYID."
	delegatemanage \
		-enable 1 \
		-id $FAMILYID \
		-pwdof ownerauthfile > run.out

	ERR=$?
	if [ $ERR -eq 0 ]; then
		echo " INFO: Successfully enabled family with ID $FAMILYID"
	else
		echo " ERROR: Could not activate family with ID $FAMILYID. Aborting test."
		dumpOutput
	fi

	echo "Creating owner delegation with owner authorization from file"
	createownerdelegation \
		-inc \
		-la $LABEL \
		-id $FAMILYID \
		-per1 0x20000000 \
		-pwdof ownerauthfile  \
		-pwdd $OWNER_DELEGATION_PASSWORD \
		-of $OWNERDELFILE > run.out
	ERR=$?
	if [ $ERR -eq 0 ]; then
		echo " INFO: Successfully performed owner delegation."
	else
		echo " ERROR: Could not perform owner delegation. Leaving test."
		dumpOutput
	fi

	echo "Loading the owner delegation with owner authorization from file."
	loadownerdelegation -pwdof ownerauthfile  \
		-row 1 -if $OWNERDELFILE > run.out
	ERR=$?
	if [ $ERR -eq 0 ]; then
		echo " INFO: Successfully loaded owner delegation blob."
	else
		echo " ERROR: Could not load owner delegation blob."
	fi

	echo "Updating the verification count on the key blob."
	updateverification \
		-pwdof ownerauthfile   \
		-if $OWNERDELFILE -of $OWNERDELFILE_NEW > run.out
	ERR=$?
	if [ $ERR -eq 0 ]; then
		echo " INFO: Successfully updated key blob."
	else
		echo " ERROR: Could not update the key blob."
	fi

	echo "Creating a storage key using SRK as parent."
	createkey $LOADKEY_VERSION -kt e \
	          -pwdp $SRK_PASSWORD \
	          -pwdk $STORAGEKEY_PASSWORD \
	          -pwdm $MIGRATION_PASSWORD \
	          -sz $KEYSIZE_ST \
	          -ok $STORAGEKEY_FILENAME \
	          -hp $SRK_HANDLE > run.out

	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not created storage key. Creating no more keys."
		dumpOutput
	else
		echo " INFO: Successfully create storage key."
	fi

	echo "Loading storage key into TPM."
	loadkey $LOADKEY_VERSION -hp $SRK_HANDLE \
	        -ik $STORAGEKEY_FILENAME.key \
	        -pwdp $SRK_PASSWORD > loadkey.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR:Could not load storage key into TPM. Creating no more keys."
		dumpOutput
	else
		STORAGEKEY_HANDLE=0x`cat loadkey.out | grep "New Key Handle" | gawk '{print $5}'`
		echo " INFO: Loaded storage key into TPM. Handle is $STORAGEKEY_HANDLE"
	fi

	echo "Migrating the storage key key. Loading the migrated key back into the TPM."
	echo "Parent key is SRK, migration key is storage key"
	./migrate -hp $SRK_HANDLE -pwdp $SRK_PASSWORD \
	          -pwdof ownerauthfile    \
	          -pwdm $MIGRATION_PASSWORD \
	          -ik $STORAGEKEY_FILENAME.key \
	          -hm $STORAGEKEY_HANDLE -pwdk $STORAGEKEY_PASSWORD > run.out
	ERR=$?
	if [ $ERR -eq 0 ]; then
		echo " INFO: Successfully migrated key and loaded it back into the TPM."
	elif [ $ERR -eq $TPM_BAD_DATASIZE ]; then
		echo " WARN: Could not migrate due to incompatible key sizes."
	else
		echo " ERROR: Could not migrate key."
		dumpOutput
		return 1
	fi


	echo ""
	echo ""
	echo ""
	echo ""









	echo "Owner clear using ownerAuth file."
	clearown -pwdof ownerauthfile > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
	    echo " ERROR: Could not clear owner."
	    dumpOutput
	else
	    echo " INFO: Successfully completed command."
	fi

	echo "TPM_PhysicalEnable should succeed with Physical Presence"
	physicalenable > run.out
	RES=$?
	if [ $RES -ne 0 ]; then
	    echo " ERROR: Cannot set Physical Enable with Physical Presence"
	else
	    echo " INFO: Can set Physical Enable with Physical Presence"
	fi

	echo "TPM_PhysicalSetDeactivated should succeed with Physical Presence"
	physicalsetdeactivated -c > run.out
	RES=$?
	if [ $RES -ne 0 ]; then
	    echo " ERROR: Cannot clear Physical Deactivated with Physical Presence"
	else
	    echo " INFO: Can clear Physical Deactivated with Physical Presence"
	fi

	echo "Taking ownership of TPM using ownerAuth file."
	takeown -pwdof ownerauthfile -pwds $SRK_PASSWORD > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not take ownership!"
		dumpOutput
		echo "        Leaving this test."
		return 1
	else
		echo " INFO: Successfully took ownership."
	fi

	echo "Disabling the owner clear command using ownerAuth file."
	disableownerclear -pwdof ownerauthfile > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not properly run this command."
		dumpOutput
	else
		echo " INFO: Successfully disabled the owner clear command."
	fi

	echo "Performing clear operation under physical access using forceclear."
	forceclear > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Could not properly run forceclear."
		dumpOutput
		echo "   **** You will have to re-cycle the TPM ****"
	else
		echo " INFO: Successfully ran forceclear."
	fi

	echo "TPM_PhysicalEnable should succeed with Physical Presence"
	physicalenable > run.out
	RES=$?
	if [ $RES -ne 0 ]; then
	    echo " ERROR: Cannot set Physical Enable with Physical Presence"
	else
	    echo " INFO: Can set Physical Enable with Physical Presence"
	fi

	echo "TPM_PhysicalSetDeactivated should succeed with Physical Presence"
	physicalsetdeactivated -c > run.out
	RES=$?
	if [ $RES -ne 0 ]; then
	    echo " ERROR: Cannot clear Physical Deactivated with Physical Presence"
	else
	    echo " INFO: Can clear Physical Deactivated with Physical Presence"
	fi

	rm $OWNERDELFILE
	rm $OWNERDELFILE_NEW

	rm ownerauthfile
}
