#################################################################################
#										#
# Author: Stefan Berger, stefanb@us.ibm.com					#
# $Id: test_signing 4726 2014-09-03 22:02:10Z kgoldman $			#
# (c) Copyright IBM Corporation 2006, 2010.					#
# 										#
# All rights reserved.								#
# 										#
# Redistribution and use in source and binary forms, with or without		#
# modification, are permitted provided that the following conditions are	#
# met:										#
# 										#
# Redistributions of source code must retain the above copyright notice,	#
# this list of conditions and the following disclaimer.				#
# 										#
# Redistributions in binary form must reproduce the above copyright		#
# notice, this list of conditions and the following disclaimer in the		#
# documentation and/or other materials provided with the distribution.		#
# 										#
# Neither the names of the IBM Corporation nor the names of its			#
# contributors may be used to endorse or promote products derived from		#
# this software without specific prior written permission.			#
# 										#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS		#
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT		#
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR		#
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT		#
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,	#
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT		#
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,		#
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY		#
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT		#
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE		#
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.		#
#										#
#################################################################################

### Test signing of contents of a file
doSignFileTest ()
{
	echo ""

	echo "Signing contents of file 'input' using EK."
	./signfile -hk $EK_HANDLE -if input -os output > run.out
	if [ $? -eq 0 ]; then
		echo " ERROR: Could sign with the EK."
	else
		echo " INFO: Command completed successfully."
	fi

	echo "Signing contents of a file 'input'."
	./signfile -pwdk $SIGNINGKEY_PASSWORD \
	           -hk $SIGNINGKEY_HANDLE \
	           -if input \
	           -os output > run.out

	if [ $? -ne 0 ]; then
		echo " ERROR: Signing contents of file 'input' failed."
		echo " WARN:  Not verifying signature."
		dumpOutput
	else
		echo " INFO: Signed contents of file 'input'."
		echo "Verifying signature of file."
		./verifyfile -is output -if input -ik $SIGNINGKEY_FILENAME.pem
		if [ $? -ne 0 ]; then
			echo " ERROR: Verifying the signature failed."
			dumpOutput
		else
			echo " INFO: Signature is correct."
		fi
	fi

	echo "Signing contents of a file 'input' using signing key w/o pwd."
	./signfile \
	           -hk $SIGNINGKEY_NOPWD_HANDLE \
	           -if input \
	           -os output > run.out

	if [ $? -ne 0 ]; then
		echo " ERROR: Signing contents of file 'input' failed."
		echo " WARN:  Not verifying signature."
		dumpOutput
	else
		echo " INFO: Signed contents of file 'input'."
		echo "Verifying signature of file."
		./verifyfile -is output -if input -ik $SIGNINGKEY_NOPWD_FILENAME.pem
		if [ $? -ne 0 ]; then
			echo " ERROR: Verifying the signature failed."
			dumpOutput
		else
			echo " INFO: Signature is correct."
		fi
	fi

	echo "Signing contents of a file 'input'. Using non-mig. signing key."
	./signfile -pwdk $SIGNINGKEY_NM_PASSWORD \
	           -hk $SIGNINGKEY_NM_HANDLE \
	           -if input \
	           -os output > run.out

	if [ $? -ne 0 ]; then
		echo " ERROR: Signing contents of file 'input' failed."
		echo " WARN:  Not verifying signature."
		dumpOutput
	else
		echo " INFO: Signed contents of file 'input'."
		echo "Verifying signature of file."
		./verifyfile -is output -if input -ik $SIGNINGKEY_NM_FILENAME.pem
		if [ $? -ne 0 ]; then
			echo " ERROR: Verifying the signature failed."
			dumpOutput
		else
			echo " INFO: Signature is correct."
		fi
	fi

	echo "Signing contents of a file 'input'. Using a legacy key."
	./signfile -pwdk $LEGACYKEY_PASSWORD \
	           -hk $LEGACYKEY_HANDLE \
	           -if input \
	           -os output > run.out

	if [ $? -ne 0 ]; then
		echo " ERROR: Signing contents of file 'input' failed."
		echo " WARN:  Not verifying signature."
		dumpOutput
	else
		echo " INFO: Signed contents of file 'input'."
		echo "Verifying signature of file."
		./verifyfile -is output -if input -ik $LEGACYKEY_FILENAME.pem
		if [ $? -ne 0 ]; then
			echo " ERROR: Verifying the signature failed."
			dumpOutput
		else
			echo " INFO: Signature is correct."
		fi
	fi

	echo "Signing contents of a file 'input'. Using a legacy key w/o pwd."
	./signfile \
	           -hk $LEGACYKEY_NOPWD_HANDLE \
	           -if input \
	           -os output > run.out

	if [ $? -ne 0 ]; then
		echo " ERROR: Signing contents of file 'input' failed."
		echo " WARN:  Not verifying signature."
		dumpOutput
	else
		echo " INFO: Signed contents of file 'input'."
		echo "Verifying signature of file."
		./verifyfile -is output -if input -ik $LEGACYKEY_NOPWD_FILENAME.pem
		if [ $? -ne 0 ]; then
			echo " ERROR: Verifying the signature failed."
			dumpOutput
		else
			echo " INFO: Signature is correct."
		fi
	fi

	echo "Signing contents of a file 'input'. Using a storage key."
	./signfile -pwdk $STORAGEKEY_PASSWORD \
	           -hk $STORAGEKEY_HANDLE \
	           -if input \
	           -os output > run.out

	if [ $? -ne 0 ]; then
		echo " INFO: Successfully completed command."
	else
		echo " ERROR: Could sign contents of file 'input'."
		dumpOutput
		echo "Verifying signature of file."
		./verifyfile -is output -if input -ik $STORAGEKEY_FILENAME.pem
		if [ $? -ne 0 ]; then
			echo " ERROR: Verifying the signature failed."
			dumpOutput
		else
			echo " INFO: Signature is correct."
		fi
	fi

	echo "Signing contents of a file 'input'. Using a 2nd storage key."
	./signfile -pwdk $SECOND_STORAGEKEY_PASSWORD \
	           -hk $SECOND_STORAGEKEY_HANDLE \
	           -if input \
	           -os output > run.out

	if [ $? -ne 0 ]; then
		echo " INFO: Successfully completed command."
	else
		echo " ERROR: Could sign contents of file 'input'."
		dumpOutput
		echo "Verifying signature of file."
		./verifyfile -is output -if input -ik $SECOND_STORAGEKEY_FILENAME.pem
		if [ $? -ne 0 ]; then
			echo " ERROR: Verifying the signature failed."
			dumpOutput
		else
			echo " INFO: Signature is correct."
		fi
	fi

	echo "Signing contents of a file 'input'. Using binding key."
	./signfile -pwdk $BINDINGKEY_PASSWORD \
	           -hk $BINDINGKEY_HANDLE \
	           -if input \
	           -os output > run.out

	if [ $? -ne 0 ]; then
		echo " INFO: Successfully completed command."
	else
		echo " ERROR: Could sign contents of file 'input'."
		dumpOutput
		echo "Verifying signature of file."
		./verifyfile -is output -if input -ik $BINDINGKEY_FILENAME.pem
		if [ $? -ne 0 ]; then
			echo " ERROR: Verifying the signature failed."
			dumpOutput
		else
			echo " INFO: Signature is correct."
		fi
	fi

	echo "Signing contents of a file 'input' using DER signing scheme."
	./signfile -pwdk $SIGNINGKEY_DER_PASSWORD \
	           -hk $SIGNINGKEY_DER_HANDLE \
	           -if input \
	           -os output > run.out

	if [ $? -ne 0 ]; then
		echo " ERROR: Signing contents of file 'input' failed."
		echo " WARN:  Not verifying signature."
		dumpOutput
	else
		echo " INFO: Signed contents of file 'input'."
		echo "Verifying signature of file according to 'DER' signature scheme."
		./verifyfile -ss der -is output -if input -ik $SIGNINGKEY_DER_FILENAME.pem > run.out
		if [ $? -ne 0 ]; then
			echo " ERROR: Verifying the signature failed."
			dumpOutput
		else
			echo " INFO: Signature is correct."
		fi

		echo "Verifying signature of file according to 'INFO' signature scheme."
		./verifyfile -ss info -is output -if input -ik $SIGNINGKEY_DER_FILENAME.pem > run.out
		if [ $? -ne 0 ]; then
			echo " INFO: Command completed successfully."
		else
			echo " ERROR: Signature verification should have failed."
		fi

		echo "Verifying signature of file according to 'normal' signature scheme."
		./verifyfile -is output -if input -ik $SIGNINGKEY_DER_FILENAME.pem > run.out
		if [ $? -ne 0 ]; then
			echo " INFO: Command completed successfully."
		else
			echo " ERROR: Signature verification should have failed."
		fi
	fi

	echo "Signing contents of a file 'input' using INFO signing scheme."
	./signfile -pwdk $SIGNINGKEY_INFO_PASSWORD \
	           -hk $SIGNINGKEY_INFO_HANDLE \
	           -if input \
	           -os output > run.out
	ERR=$?
	if [ $ERR -ne 0 ]; then
		echo " ERROR: Signing contents of file 'input' failed."
		echo " WARN:  Not verifying signature."
		dumpOutput
	else
		echo " INFO: Signed contents of file 'input'."
		echo "Verifying signature of file."
		./verifyfile -ss info -is output -if input -ik $SIGNINGKEY_INFO_FILENAME.pem > run.out
		if [ $? -ne 0 ]; then
			echo " ERROR: Verifying the signature failed."
			dumpOutput
		else
			echo " INFO: Signature is correct."
		fi

		echo "Verifying signature of file according to 'DER' signature scheme."
		./verifyfile -ss der -is output -if input -ik $SIGNINGKEY_DER_FILENAME.pem > run.out
		if [ $? -ne 0 ]; then
			echo " INFO: Command completed successfully."
		else
			echo " ERROR: Signature verification should have failed."
		fi

		echo "Verifying signature of file according to 'normal' signature scheme."
		./verifyfile -is output -if input -ik $SIGNINGKEY_DER_FILENAME.pem > run.out
		if [ $? -ne 0 ]; then
			echo " INFO: Command completed successfully."
		else
			echo " ERROR: Signature verification should have failed."
		fi
	fi

}
